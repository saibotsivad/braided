import { authenticate } from 'api-ws/lib/authenticate.js'
import { log } from 'shared/log.js'
import DynamoDB from 'aws-sdk/clients/dynamodb'

const db = new DynamoDB()
const TableName = process.env.TABLE_NAME

// Many of these comments are copied (and lightly edited) from:
//     https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-output.html
// Be sure to read through that documentation for more information.

const handler = async (event, context) => {

	// We want to authorize this connection to execute the
	// "connect" function, which will then authorize it to
	// send messages and disconnect.
	//
	// Because we've only associated a single Lambda with this authorizer
	// function, we can use the event'd method ARN as the policy document's
	// allowed resource (the `Resource` property).
	//
	// If this function were assigned as the authorizer of multiple Lambdas,
	// you would want to verify that the request authorizes that specific
	// resource, and not necessarily pass the calling method's ARN back
	// directly but instead construct a `Resource` string manually.
	//
	// Based on:
	//     https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-lambda-auth.html
	// Example:
	//     arn:aws:execute-api:us-east-1:123456789012:abcd1234ef/dev/$connect
	const Resource = event.methodArn

	// The keyword `token` comes from the `serverless.yml` configuration
	// authorizor specification, which looks like:
	//
	//     authorizer:
	//       identitySource:
	//         - 'route.request.querystring.token'
	const { Effect, principalId, sessionId, result } = await authenticate({
		db,
		TableName,
		token: event.queryStringParameters.token,
		currentUnixTime: Math.floor(new Date().getTime() / 1000)
	})

	const policy = {
		// The principal user identification associated with the token
		// sent by the client. Typically the user identifier.
		principalId,
		policyDocument: {
			Version: '2012-10-17',
			Statement: [{
				Resource,
				Effect,
				// The caller (aka the one initializing the WebSocket connection)
				// is authorized (`Allow`) to execute the function associated with
				// the `$connect` route.
				Action: 'execute-api:Invoke'
			}]
		},
		// The context object from a Lambda authorizer directly to the $connect Lambda
		// function as part of the input event. You can retrieve the context key-value
		// pairs in the Lambda function by calling `event.requestContext.authorizer[$KEY]`. 
		//
		// These property names are reserved, and will be silently overridden if set:
		// - principalId
		// - integrationLatency
		context: {
			sessionId
		}
		// If you need to enforce throttling or other limits per customer, you can
		// investigage using the property:
		//
		// usageIdentifierKey: '{api-key}'
		//
		// For more details, see this documentation:
		// https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html
	}

	log.info('auth', { event, context, policy, principalId, sessionId, result })

	return policy
}

export default { handler }
