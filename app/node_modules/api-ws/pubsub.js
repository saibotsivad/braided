import { log } from 'shared/log.js'
import { parseMessage } from 'api-ws/lib/parse-message.js'
import { sendWebsocketMessage } from 'shared/send-websocket-message.js'
import { subscribe } from 'api-ws/lib/subscribe.js'
import { unsubscribe } from 'api-ws/lib/unsubscribe.js'
import DynamoDB from 'aws-sdk/clients/dynamodb'

const db = new DynamoDB()
const TableName = process.env.TABLE_NAME

const handler = async (event, context) => {
	const { apiId, connectionId, authorizer: { principalId: userId } } = event.requestContext
	const { id, type, list } = parseMessage(event.body) || {}
	let out = {
		result: undefined,
		response: [
			id || '_',
			'400',
			'Bad Request',
			'Command not recognized'
		]
	}
	console.log('?????', list)
	if (type === 'SUB') {
		out = await subscribe({ db, TableName, apiId, connectionId, userId, id, list })
	} else if (type === 'UNSUB') {
		out = await unsubscribe({ db, apiId, TableName, connectionId, subscriptionId: id,     userId, id, type, list })
	}
	log.info('subscriber', { event, ...out })
	await sendWebsocketMessage(event.requestContext, out.response)
	return { statusCode: 200 }
}

export default { handler }
