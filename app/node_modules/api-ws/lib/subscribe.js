import shortid from 'shortid'

/*
- get a list of all connections subscribed to a collection
	- for posting updates of a collection
	- struct:
		pk: `coll:$COLLECTION`
		sk: `conn:$CONNECTION_ID`
		gid: `ws:$USER_ID:conn:$CONNECTION_ID`
	- data:
		api: `$API_ID`
		subid: `$SUBSCRIPTION_ID`
		subtype: `FULL|DIFF|DELETE|PING`
*/
export const subscribe = async ({ db, TableName, apiId, connectionId, userId, id, list }) => {
	// TODO make sure the user has access to all subscribed paths

	const writableItems = list.map(item => ({
		pk: {
			S: `coll:${item.path}`
		},
		sk: {
			S: `conn:${connectionId}`
		},
		gid: {
			S: `ws:${userId}:conn:${connectionId}`
		},
		api: {
			S: apiId
		},
		subid: {
			S: shortid.generate()
		},
		subtype: {
			S: item.type
		}
	}))
	const result = await db.batchWriteItem({
		RequestItems: {
			[TableName]: writableItems.map(Item => ({
				PutRequest: { Item }
			}))
		},
		ReturnConsumedCapacity: 'TOTAL',
		ReturnItemCollectionMetrics: 'SIZE'
	}).promise()
	return {
		result,
		response: [
			id,
			'200',
			'Subscribed',
			writableItems.map(item => item.subid.S)
		]
	}
}
