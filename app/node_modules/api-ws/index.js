import DynamoDB from 'aws-sdk/clients/dynamodb'

const db = new DynamoDB()
const TableName = process.env.TABLE_NAME
const OK = { statusCode: 200 }

export default {
	connect: async (event, context) => {
		const { apiId, connectionId } = event.requestContext
		const result = await db.putItem({
			Item: {
				pk: {
					S: 'ws'
				},
				sk: {
					S: `ws:${connectionId}`
				},
				id: {
					S: connectionId
				},
				apiId: {
					S: apiId
				}
			}, 
			ReturnConsumedCapacity: 'TOTAL', 
			TableName
		}).promise()
		console.log(JSON.stringify({ name: 'connect', result }))
		return OK
	},
	disconnect: async (event, context) => {
		const { apiId, connectionId } = event.requestContext
		const result = await db.deleteItem({
			Key: {
				pk: {
					S: 'ws'
				},
				sk: {
					S: `ws:${connectionId}`
				}
			}, 
			ReturnConsumedCapacity: 'TOTAL', 
			TableName
		}).promise()
		console.log(JSON.stringify({ name: 'disconnect', result }))
		return OK
	},
	subscriber: async (event, context) => {
		const { apiId, connectionId, requestId } = event.requestContext
		const { req, channels } = JSON.parse(event.body)
		// TODO make sure the user has access to these channels
		if (req === 'sub') {
			// subscribe
			console.log(JSON.stringify({ name: 'subscribe', result }))
		} else if (req === 'unsub') {
			// unsubscribe
			console.log(JSON.stringify({ name: 'unsubscribe', result }))
		} else {
			// pong: invalid command
		}
		return OK
	}
}
