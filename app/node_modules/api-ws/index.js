import { parseMessage } from 'api-ws/parse-message.js'
import { sendWebsocketMessage } from 'shared/send-websocket-message.js'
import DynamoDB from 'aws-sdk/clients/dynamodb'

const db = new DynamoDB()
const OK = { statusCode: 200 }
const TableName = process.env.TABLE_NAME

export default {
	connect: async (event, context) => {
		const { apiId, connectionId } = event.requestContext
		const result = await db.putItem({
			Item: {
				pk: {
					S: 'ws'
				},
				sk: {
					S: `ws:${connectionId}`
				},
				id: {
					S: connectionId
				},
				apiId: {
					S: apiId
				}
			}, 
			ReturnConsumedCapacity: 'TOTAL', 
			TableName
		}).promise()
		console.log(JSON.stringify({ name: 'connect', result }))
		return OK
	},
	disconnect: async (event, context) => {
		const { apiId, connectionId } = event.requestContext
		const result = await db.deleteItem({
			Key: {
				pk: {
					S: 'ws'
				},
				sk: {
					S: `ws:${connectionId}`
				}
			}, 
			ReturnConsumedCapacity: 'TOTAL', 
			TableName
		}).promise()
		console.log(JSON.stringify({ name: 'disconnect', result }))
		return OK
	},
	subscriber: async (event, context) => {
		const { id, type, list } = parseMessage(event.body) || {}
		let response = [
			id || '_',
			'400',
			'Bad Request',
			'Command not recognized'
		]
		let result = undefined
		const user = id && await LOOKUP_USER_SOMEHOW('???')
		if (user && type === 'SUBSCRIBE') {
			// TODO make sure the user has access to all paths
			result = await db.batchWriteItem({
				RequestItems: {
					[TableName]: list.map((item, index) => ({
						// item.path => /articles/123
						// item.type => FULL
						// for each 'item' need to return an id on response
						PutRequest: {
							Item: {
								pk: {
									S: 'ws:/articles/123' // ???
								},
								sk: {
									S: '???'
								}
							}
						}
					})
				},
				ReturnConsumedCapacity: 'TOTAL',
				ReturnItemCollectionMetrics: 'SIZE'
			}).promise()
			response = [
				id,
				'200',
				'Subscribed',
				list.map((_, index) => index.toString())
			]
		} else if (user && type === 'UNSUBSCRIBE') {
			result = await db.batchWriteItem({
				RequestItems: {
					[TableName]: list.map(identifier => ({
						DeleteRequest: {
							Key: {
								pk: {
									S: 'ws:/articles/123' // ???
								},
								sk: {
									S: '???'
								}
							}
						}
					})
				},
				ReturnConsumedCapacity: 'TOTAL',
				ReturnItemCollectionMetrics: 'SIZE'
			}).promise()
			response = [
				id,
				'200',
				'Unsubscribed'
			]
		}
		console.log(JSON.stringify({ name: 'subscriber', response, body: event.body, result }))
		await sendWebsocketMessage(event.requestContext, response)
		return OK
	}
}
