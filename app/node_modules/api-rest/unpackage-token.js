import { decode } from 'shared/base64-decode.js'
import { ExpiredJwtException } from 'shared/exception/expired-jwt.js'
import { InvalidJwtException } from 'shared/exception/invalid-jwt.js'

const invalidExpiration = (unpacked, currentDate) => {
	return !unpacked.payload
		|| !unpacked.payload.exp
		|| unpacked.payload.exp > currentDate
}

const validateSignature = async (header, payload, signature) => {
	// TODO
}

export const unpackageToken = async (token, currentDate = new Date()) => {
	if (typeof token !== 'string' || !token) {
		throw new TypeError('The token must be a JWT string.')
	}

	let parts
	let unpacked
	try {
		const parts = token.split('.')
		unpacked = {
			header: decode(parts[0]),
			payload: decode(parts[1]),
			signature: parts[2]
		}
	} catch (error) {
		throw new InvalidJwtException('Provided JWT is malformed and cannot be parsed.')
	}

	if (invalidExpiration(unpacked, currentDate)) {
		throw new ExpiredJwtException('Provided JWT has an expiration date in the past.')
	}

	await validateSignature(...parts)

	return unpacked
}
