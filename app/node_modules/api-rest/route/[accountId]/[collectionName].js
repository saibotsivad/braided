import { dynamodb } from 'api-rest/service/dynamodb.js'
import { etagIfNoneMatch } from 'shared/etag-if-none-match.js'
import { getConfiguration } from './get-configuration.js'
import { partition } from 'shared/toolbox.js'

export const route = {
	path: '/:accountId/:collection',
	methods: {
		GET: async (request, { accountId, collectionName, originalUrl, lastUpdated }, service) => {
			const KeyConditionExpression = lastUpdated
				? 'PrimaryKey = :pk AND SortKey > :sk'
				: 'PrimaryKey = :pk'
			const ExpressionAttributeValues = {
				':pk': {
					S: `${accountId.toUpperCase()}:${collectionName.toUpperCase()}`
				}
			}
			if (lastUpdated) {
				ExpressionAttributeValues[':sk'] = {
					S: lastUpdated.toString()
				}
			}
			const { db, TableName } = await dynamodb()
			const results = await db.query({
				TableName,
				KeyConditionExpression,
				ExpressionAttributeValues,
				Limit: 25
			})
			if (!results.Items) {
				return {
					status: 500,
					body: {
						errors: [{
							meta: { results }
						}]
					}
				}
			}
			const { LastEvaluatedKey, Items } = results
			const [ meta, data ] = partition(Items, item => item.PrimaryKey.S === item.GlobalIdentifier.S)

			const collectionMeta = meta && meta[0] && meta[0].JsonData && meta[0].JsonData.S

			const body = {
				data: data.map(item => JSON.parse(item.JsonData.S)),
				meta: {
					collection: collectionMeta && JSON.parse(collectionMeta),
					dynamodb: omit(results, [ 'Items' ])
				}
			}
			if (LastEvaluatedKey) {
				const [ timestamp ] = LastEvaluatedKey.SortKey.S.split(':')
				body.links = {
					next: `${originalUrl}?lastUpdated=${timestamp}` 
				}
			}
			return etagIfNoneMatch(request, body)
		}
	}
}
