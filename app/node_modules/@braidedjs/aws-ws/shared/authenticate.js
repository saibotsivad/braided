import { hashPassword } from '@braidedjs/lambda/hash-password.js'

export const authenticate = await ({ db, TableName, token, currentUnixTime }) => {
	const { userId, sessionId, secret } = token // after base64 decode and check sig etc
	let Effect = 'Deny'

	const { Item, ...result } = await db.getItem({
		TableName,
		Key: {
			pk: {
				S: `user:${userId}:sess`
			},
			sk: {
				S: `sess:${sessionId}`
			}
		},
		ProjectionExpression: 'pk,sk,api,ws',
		ReturnConsumedCapacity: 'TOTAL'
	}).promise()

	if (Item && Item.ws && Item.ws.expires > currentUnixTime) {
		const hashedSecret = await hashPassword(secret)
		if (Item.ws.hash === hashedSecret) {
			Effect = 'Allow'
		}
	}

	return {
		Effect,
		principalId: userId,
		sessionId,
		result
	}
}
