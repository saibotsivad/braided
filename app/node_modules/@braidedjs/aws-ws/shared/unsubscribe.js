export const unsubscribe = async ({ db, apiId, TableName, connectionId, subscriptionId,       userId, id, type, list }) => {
/*
- get a list of all collection subscriptions for a connection
	- to remove when disconnecting
	- to remove on unsubscribe
	- struct:
		pk: `conn:$CONNECTION_ID`
		sk: `sub:$COLLECTION:api:$API_ID:subid:$SUBSCRIPTION_ID`
		gid: `ws:$USER_ID:conn:$CONNECTION_ID`
*/
	const { Items, ...queryResults } = await db.query({
		TableName,
		ExpressionAttributeValues: {
			':pk': {
				S: `conn:${connectionId}`
			},
			':sk': {
				S: `sub:${subscriptionId}:api:${apiId}`
			}
		},
		KeyConditionExpression: 'pk = :pk AND sk = :sk',
		ReturnConsumedCapacity: 'TOTAL'
	}).promise()

	const result = await db.batchWriteItem({
		RequestItems: {
			[TableName]: list.map(identifier => ({
				DeleteRequest: {
					Key: {
						pk: {
							S: 'ws:/articles/123' // ???
						},
						sk: {
							S: '???'
						}
					}
				}
			}))
		},
		ReturnConsumedCapacity: 'TOTAL',
		ReturnItemCollectionMetrics: 'SIZE'
	}).promise()
	return {
		result,
		response: [
			id,
			'200',
			'Unsubscribed'
		]
	}
}
