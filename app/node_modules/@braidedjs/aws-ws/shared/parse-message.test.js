import { test } from 'zora'
import { parseMessage } from './parse-message.js'

const parse = string => parseMessage(JSON.stringify(string))

test('parse-message', t => {

	t.test('invalid input always returns an empty array', t => {
		t.equal(
			parseMessage('blah'),
			false,
			'invalid json'
		)

		t.equal(
			parse({ foo: 'bar' }),
			false,
			'not an array but valid json'
		)

		t.equal(
			parse([]),
			false,
			'incorrect array length'
		)

		t.equal(
			parse([ '1' ]),
			false,
			'still incorrect array length'
		)

		t.equal(
			parse([ 1, 'LIST' ]),
			false,
			'request identifier not a string'
		)

		t.equal(
			parse([ '1', 'FOO' ]),
			false,
			'request type not valid'
		)

		t.equal(
			parse([ '1', 'SUBSCRIBE' ]),
			false,
			'subscribe request must contain subscription list'
		)

		t.equal(
			parse([ '1', 'UNSUBSCRIBE' ]),
			false,
			'unsubscribe request must contain subscription id list'
		)
	})

	t.test('valid commands', t => {
		t.deepEqual(
			parse([
				'1',
				'SUBSCRIBE',
				[
					[ '/foo/bar1', 'FULL' ],
					[ '/foo/bar2', 'DIFF' ],
					[ '/foo/bar3', 'PING' ]
				]
			]),
			{
				id: '1',
				type: 'SUBSCRIBE',
				list: [
					{ path: '/foo/bar1', type: 'FULL' },
					{ path: '/foo/bar2', type: 'DIFF' },
					{ path: '/foo/bar3', type: 'PING' }
				]
			},
			'subscribe command with subscription list'
		)

		t.deepEqual(
			parse([
				'1',
				'UNSUBSCRIBE',
				[
					'/foo/bar1',
					'/foo/bar2',
					'/foo/bar3'
				]
			]),
			{
				id: '1',
				type: 'UNSUBSCRIBE',
				list: [
					'/foo/bar1',
					'/foo/bar2',
					'/foo/bar3'
				]
			},
			'unsubscribe command with subscription identifiers'
		)
	})
})
