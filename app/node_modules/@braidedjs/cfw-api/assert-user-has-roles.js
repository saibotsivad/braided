import { BadRequestException } from 'shared/exception/bad-request.js'
import { getUser } from 'api-rest/service/get-user.js'
import { InvalidJwtException } from 'shared/exception/invalid-jwt.js'
import { UnauthorizedAccessException } from 'shared/exception/unauthorized-access.js'
import { unpackageToken } from 'api-rest/unpackage-token.js'
import { userHasRoles } from 'shared/user-has-roles.js'

const getBearerToken = request => {
	const header = request.headers && request.headers.authorization || ''
	const { 1: bearer } = header.split('Bearer ')
	const token = (bearer || '').split(';')[0]
	if (!token) {
		throw new BadRequestException('This endpoint requires bearer authorization but a token was not found.')
	}
	return token
}

export const assertUserHasRoles = async (request, roles, pathParameters) => {
	const { payload: { sub } } = await unpackageToken(getBearerToken(request))
	if (!sub) {
		throw new InvalidJwtException('The JWT was parsed but did not have required properties.')
	}
	const user = await getUser(sub)
	if (!user || !userHasRoles(user, roles, pathParameters)) {
		throw new UnauthorizedAccessException('Requesting user does not have required roles for this request.')
	}
}
